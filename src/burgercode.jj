/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
  //LOOKAHEAD = 2;
  FORCE_LA_CHECK = true;
}

PARSER_BEGIN(burgercode)

public class burgercode
{
  public static void main(String args []) throws ParseException
  {
    burgercode parser = new burgercode(System.in);
    while (true)
    {
      System.out.println("O que vai ser hoje?:\n");
     
      try
      {
        parser.principal();
      }
      catch (Exception e)
      {
        System.out.println("Me desculpa. Isso nunca aconteceu antes.");
        System.out.println(e.getMessage());
        burgercode.ReInit(System.in);
        break;
      }
      catch (Error e)
      {
        System.out.println("Opa.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }
}

PARSER_END(burgercode)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : /* ATRIBUI��ES */
{
  < INICIOPROGRAMA 	: "liga" >
| < INICIOBLOCO 	  : "prepara" >
| < FIMBLOCO 		    : "entrega" >
| < REAL			      : "xtudo" >
| < INTEIRO			    : "xsalada" >
| < LETRA			      : "hamburguer" >
| < FIMINSTRUCAO	  : "prensou" >
| < DIGITO			    : ["0"-"9"] >
| < NUMERO 			    : (< DIGITO >)+ >
| < CARACTERE		    : (["A"- "Z"] | ["a" - "z"]) >
| < IDENTIFICADOR	  : "cliente_"(< CARACTERE >|< NUMERO >)+ >
| < ATRIBUICAO		  : "adiciona" >
| < IF				      : "se" >
| < FIMIF			      : "fimse" >
| < FOR				      : "para" >
| < DO				      : "fazer" >
| < WHILE			      : "enquanto" >
| < PARA			      : "ate" >
| < PRINT			      : "mostra" >
}

TOKEN : /* OPERADORES */
{
	  < SOMA 			    : "+"  >
| 	< SUBTRACAO		  : "-"  >
| 	< MULTIPLICACAO	: "*"  >
| 	< DIVISAO		    : "/"  >
|   < ABRECHAVE		  : "{"  >
| 	< FECHACHAVE	  : "}"  >
| 	< ABREPAR		    : "("  >
| 	< FECHAPAR		  : ")"  >
| 	< NEGACAO		    : "!=" >
|   < IGUALIGUAL	  : "==" >
| 	< IGUAL			    : "="  >
|   < IGUALMAIOR	  : ">=" >
| 	< MAIOR			    : ">"  >
|   < IGUALMENOR	  : "<=" >
| 	< MENOR			    : "<"  >
}

void principal() :
{}
{
  < INICIOPROGRAMA > < ABREPAR >
    (bloco())*
  < FECHAPAR >
}

void bloco() :
{}
{
  (( declaracaoVariavel()) | ( expressao() ) | ( condicionalSe()) | ( repeticaoFor() ) | ( repeticaoDo() ))
}

void declaracaoVariavel() :
{}
{
  tipoDado() <IDENTIFICADOR > (< ATRIBUICAO > (< CARACTERE > | < NUMERO >))? <FIMINSTRUCAO >
}

void tipoDado() :
{}
{
   < REAL > | < INTEIRO > | < LETRA >
}

void printarVariavel() :
{
	Token t;
}
{
    (t=< IDENTIFICADOR > { System.out.println("Este e o " + t.image); })
}

void condicionalSe() :
{
}
{
  < IF > < ABRECHAVE > condicao()< FECHACHAVE > <ABREPAR > (bloco())* < FECHAPAR >
}

void condicao() :
{ 
}
{
  (conta()) (comparacao()) (conta()) 
}

void comparacao() :
{}
{
  < NEGACAO > |< IGUALIGUAL > | < IGUAL > | < IGUALMAIOR > | < MAIOR > | < IGUALMENOR > | < MENOR >
}

void expressao() :
{
}
{
  (< IDENTIFICADOR >) < ATRIBUICAO > ((< CARACTERE >)+ | conta()) < FIMINSTRUCAO >
}

void conta() :
{
}
{
  ((valores()) (operacao() ( valores()))*) 
}

void contaComPrescendencia():
{}
{
  < ABRECHAVE > conta() < FECHACHAVE >
}

void valores():
{}
{
  ((< IDENTIFICADOR >) | (< DIGITO >) | (< NUMERO >) | (contaComPrescendencia()))
} 

void operacao():
{}
{
  ( < SOMA > | < SUBTRACAO > | < MULTIPLICACAO > | < DIVISAO > )
}

void repeticaoFor()	:
{
}
{
  < FOR > < ABRECHAVE >(< IDENTIFICADOR >)+ < IGUAL > (< DIGITO > | < NUMERO >) < PARA > (< DIGITO > | < NUMERO >) < FECHACHAVE > < ABREPAR > (bloco())* < FECHAPAR >
}


void repeticaoDo()  :
{
}
{
  < DO > < ABREPAR > (bloco())* < FECHAPAR > < WHILE > < ABRECHAVE > condicao() < FECHACHAVE > 
}